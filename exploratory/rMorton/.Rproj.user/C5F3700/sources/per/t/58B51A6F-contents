library(jsonlite)
library(rvest)
library(xml2)
library(tidyr)
library(dplyr)
library(purrr)
library(tidytext)
library(myIO)
library(DT)

df <- read_html("https://raw.githubusercontent.com/sourcecred/research/master/sample-graphs/sourcecred_sourcecred.json") %>%
  html_node('body') %>%
  html_text() %>%
  fromJSON()

gsub("]", "}", gsub("\\[", "{", toJSON(df$nodes[[2]][[1]])))

{
  "address": [
    "sourcecred", "git","HAS_PARENT", "2","COMMIT","007cf88172d7ea9b0cdada78f124f7a41b811b30",  "2","COMMIT","d310561b9473ecaa0e22da3dac089ab61df2f723"],
  "dstIndex": 744,
  "srcIndex": 0
}


df_nodes <- map_df(df$nodes[[2]] , function(x) {
  if(length(x) == 4){
    node_type <- gsub("_$", "", paste0(x[1:3], collapse = "_"))
    final <- data.frame(node_type = node_type, stringsAsFactors = FALSE)
  } else {
    node_type <- gsub("_$", "", paste0(x[1:4], collapse = "_"))
    final <- data.frame(node_type = node_type, stringsAsFactors = FALSE)
  }
  
  return(final)
})

df_edges <- df$edges[[2]] %>%
  bind_cols() %>%
  group_by(row_number()) %>%
  mutate(edge_type = gsub("_$", "", paste0(gsub("[0-9]", "", address[1][[1]][1:4]), collapse = "_")),
         source_node = df_nodes$node_type[ srcIndex + 1 ],
         dest_node = df_nodes$node_type[ dstIndex + 1 ]) %>%
  ungroup()%>%
  select(edge_type, srcIndex, dstIndex, source_node, dest_node)

## count node types
node_types_count <- df_nodes %>%
  group_by(node_type) %>%
  summarise(Counts = as.numeric(n())) %>%
  arrange(Counts)

node_types_graph <- myIO::myIO() %>%
  myIO::addIoLayer(type = "bar",
             color = "steelblue",
             label = "Count",
             data = node_types_count,
             mapping = list(
               x_var = 'node_type',
               y_var = "Counts"
             ),
             options = list(barSize = "large"))%>%
  myIO::setAxisLimits(ylim = list(min = "0")) %>%
  myIO::setAxisFormat(xAxis = "text",yAxis = ",.0f", toolTip = ",.0f") %>%
  myIO::flipAxis()%>%
  myIO::defineCategoricalAxis()%>%
  myIO::setmargin(left = 250, top = 40)%>%
  myIO::suppressLegend()

## count edge types
edge_types_count <- df_edges %>%
  group_by(edge_type) %>%
  summarise(Counts = as.numeric(n())) %>%
  arrange(Counts)

edge_types_graph <- myIO::myIO() %>%
  myIO::addIoLayer(type = "bar",
                   color = "orange",
                   label = "Count",
                   data = edge_types_count,
                   mapping = list(
                     x_var = 'edge_type',
                     y_var = "Counts"
                   ),
                   options = list(barSize = "large"))%>%
  myIO::setAxisLimits(ylim = list(min = "0")) %>%
  myIO::setAxisFormat(xAxis = "text",yAxis = ",.0f", toolTip = ",.0f") %>%
  myIO::flipAxis()%>%
  myIO::defineCategoricalAxis()%>%
  myIO::setmargin(left = 250, top = 40)%>%
  myIO::suppressLegend()

## count node pairings (by edge type?)
node_pairings_count <- df_edges %>%
  group_by(edge_type, source_node, dest_node) %>%
  summarise(Count = n()) %>%
  arrange(desc(Count))

node_pairings_table <- DT::datatable(node_pairings_count)

## text analysis of nodes
node_tokens <- df$nodes[[2]] %>%
  lapply(., function(x){
    final = data.frame(text = paste0(x, collapse = ", "), stringsAsFactors = FALSE)
    return(final)
  }) %>% 
  bind_rows() %>%
  unnest_tokens(word, text) %>%
  filter(!grepl("[0-9]", word)) %>%
  group_by(word) %>%
  summarise(Count = n()) %>%
  top_n(10, Count) %>%
  arrange(Count)

node_tokens_graph <- myIO::myIO() %>%
  myIO::addIoLayer(type = "bar",
                   color = "#004D40",
                   label = "Count",
                   data = node_tokens,
                   mapping = list(
                     x_var = 'word',
                     y_var = "Count"
                   ),
                   options = list(barSize = "large"))%>%
  myIO::setAxisLimits(ylim = list(min = "0")) %>%
  myIO::setAxisFormat(xAxis = "text",yAxis = ",.0f", toolTip = ",.0f") %>%
  myIO::flipAxis()%>%
  myIO::defineCategoricalAxis()%>%
  myIO::setmargin(left = 100, top = 40)%>%
  myIO::suppressLegend()

## tesxt analysis of edges
edge_tokens <- df$edges[[2]]$address %>%
  lapply(., function(x){
     final = data.frame(text = paste0(x, collapse = ", "), stringsAsFactors = FALSE)
     return(final)
  }) %>% 
  bind_rows() %>%
  unnest_tokens(word, text) %>%
  filter(!grepl("[0-9]", word)) %>%
  group_by(word) %>%
  summarise(Count = n())%>%
  top_n(20, Count) %>%
  arrange(Count)

edge_tokens_graph <- myIO::myIO() %>%
  myIO::addIoLayer(type = "bar",
                   color = "#D81B60",
                   label = "Count",
                   data = edge_tokens,
                   mapping = list(
                     x_var = 'word',
                     y_var = "Count"
                   ),
                   options = list(barSize = "large"))%>%
  myIO::setAxisLimits(ylim = list(min = "0")) %>%
  myIO::setAxisFormat(xAxis = "text",yAxis = ",.0f", toolTip = ",.0f") %>%
  myIO::flipAxis()%>%
  myIO::defineCategoricalAxis()%>%
  myIO::setmargin(left = 150, top = 40)%>%
  myIO::suppressLegend()
